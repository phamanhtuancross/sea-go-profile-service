//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: profile-service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol V1_ProfileServiceHomeCall: ClientCallUnary {}

fileprivate final class V1_ProfileServiceHomeCallBase: ClientCallUnaryBase<V1_HomeRequest, V1_HomeResponse>, V1_ProfileServiceHomeCall {
  override class var method: String { return "/v1.ProfileService/Home" }
}

internal protocol V1_ProfileServiceRegisterCall: ClientCallUnary {}

fileprivate final class V1_ProfileServiceRegisterCallBase: ClientCallUnaryBase<V1_RegisterRequest, V1_RegisterResponse>, V1_ProfileServiceRegisterCall {
  override class var method: String { return "/v1.ProfileService/Register" }
}


/// Instantiate V1_ProfileServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol V1_ProfileServiceService: ServiceClient {
  /// Synchronous. Unary.
  func home(_ request: V1_HomeRequest) throws -> V1_HomeResponse
  /// Asynchronous. Unary.
  func home(_ request: V1_HomeRequest, completion: @escaping (V1_HomeResponse?, CallResult) -> Void) throws -> V1_ProfileServiceHomeCall

  /// Synchronous. Unary.
  func register(_ request: V1_RegisterRequest) throws -> V1_RegisterResponse
  /// Asynchronous. Unary.
  func register(_ request: V1_RegisterRequest, completion: @escaping (V1_RegisterResponse?, CallResult) -> Void) throws -> V1_ProfileServiceRegisterCall

}

internal final class V1_ProfileServiceServiceClient: ServiceClientBase, V1_ProfileServiceService {
  /// Synchronous. Unary.
  internal func home(_ request: V1_HomeRequest) throws -> V1_HomeResponse {
    return try V1_ProfileServiceHomeCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func home(_ request: V1_HomeRequest, completion: @escaping (V1_HomeResponse?, CallResult) -> Void) throws -> V1_ProfileServiceHomeCall {
    return try V1_ProfileServiceHomeCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func register(_ request: V1_RegisterRequest) throws -> V1_RegisterResponse {
    return try V1_ProfileServiceRegisterCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func register(_ request: V1_RegisterRequest, completion: @escaping (V1_RegisterResponse?, CallResult) -> Void) throws -> V1_ProfileServiceRegisterCall {
    return try V1_ProfileServiceRegisterCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol V1_ProfileServiceProvider: ServiceProvider {
  func home(request: V1_HomeRequest, session: V1_ProfileServiceHomeSession) throws -> V1_HomeResponse
  func register(request: V1_RegisterRequest, session: V1_ProfileServiceRegisterSession) throws -> V1_RegisterResponse
}

extension V1_ProfileServiceProvider {
  internal var serviceName: String { return "v1.ProfileService" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/v1.ProfileService/Home":
      return try V1_ProfileServiceHomeSessionBase(
        handler: handler,
        providerBlock: { try self.home(request: $0, session: $1 as! V1_ProfileServiceHomeSessionBase) })
          .run()
    case "/v1.ProfileService/Register":
      return try V1_ProfileServiceRegisterSessionBase(
        handler: handler,
        providerBlock: { try self.register(request: $0, session: $1 as! V1_ProfileServiceRegisterSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol V1_ProfileServiceHomeSession: ServerSessionUnary {}

fileprivate final class V1_ProfileServiceHomeSessionBase: ServerSessionUnaryBase<V1_HomeRequest, V1_HomeResponse>, V1_ProfileServiceHomeSession {}

internal protocol V1_ProfileServiceRegisterSession: ServerSessionUnary {}

fileprivate final class V1_ProfileServiceRegisterSessionBase: ServerSessionUnaryBase<V1_RegisterRequest, V1_RegisterResponse>, V1_ProfileServiceRegisterSession {}

